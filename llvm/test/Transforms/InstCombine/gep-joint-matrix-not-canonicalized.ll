; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

%"struct.joint_matrix" = type { target("spirv.JointMatrixINTEL", float, 16, 16, 3, 3, 2) }

; This test verfies that we don't canoncialize GEPs on aggregated types
; containing "spirv.JointMatrixINTEL" target extension type.

define void @foo() {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[MAT_ARRAY:%.*]] = alloca [2 x [2 x %struct.joint_matrix]], align 8
; CHECK-NOT:     getelementptr inbounds i8
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr inbounds [2 x [2 x %struct.joint_matrix]], ptr [[MAT_ARRAY]], i64 0, i64 0, i64 1
; CHECK-NEXT:    call void @bar(ptr nonnull [[GEP]])
; CHECK-NEXT:    ret void
;
entry:
  %mat.array = alloca [2 x [2 x %"struct.joint_matrix"]], align 8
  %gep = getelementptr inbounds [2 x [2 x %"struct.joint_matrix"]], ptr %mat.array, i64 0, i64 0, i64 1
  call void @bar(ptr %gep)
  ret void
}

declare void @bar(ptr %mat.ptr)
